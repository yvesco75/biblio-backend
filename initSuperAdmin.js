// Script pour cr√©er le super administrateur
// √Ä ex√©cuter UNE SEULE FOIS : node initSuperAdmin.js

const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');

const db = new sqlite3.Database('./bibliotheque.db');

// Cr√©er la table des admins
db.serialize(() => {
  // Table admins
  db.run(`
    CREATE TABLE IF NOT EXISTS admins (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL,
      role TEXT DEFAULT 'admin',
      date_creation DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `, (err) => {
    if (err) {
      console.error('Erreur cr√©ation table:', err);
      return;
    }
    console.log('‚úÖ Table admins cr√©√©e');
  });

  // Hasher le mot de passe
  const password = 'SuperAdmin2025!'; // MOT DE PASSE √Ä CHANGER !
  const hashedPassword = bcrypt.hashSync(password, 10);

  // Ins√©rer le super admin
  db.run(
    `INSERT OR REPLACE INTO admins (id, username, password, role) 
     VALUES (1, 'superadmin', ?, 'superadmin')`,
    [hashedPassword],
    function(err) {
      if (err) {
        console.error('Erreur cr√©ation super admin:', err);
      } else {
        console.log('\nüéâ SUPER ADMIN CR√â√â AVEC SUCC√àS !');
        console.log('================================');
        console.log('Identifiant : superadmin');
        console.log('Mot de passe :', password);
        console.log('================================');
        console.log('‚ö†Ô∏è  CHANGEZ CE MOT DE PASSE apr√®s la premi√®re connexion !');
      }
      
      db.close();
    }
  );
});